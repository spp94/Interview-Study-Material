import java.util.*;

class Tree {
    private static class Node {
        private int value;
        private Node left;
        private Node right;
        Node(int value) {
            this.value = value;
        }
    }

    private static int size = 0;

    public static int size() {
        return size;
    }

    public static boolean isEmpty() {
        return size() == 0;
    }

    public static Node insert(Node root, int value) {
        if(root == null) {
            root = new Node(value);
            size++;
            return root;
        }
        if(root.value > value) {
            root.left = insert(root.left, value);
        }
        else {
            root.right = insert(root.right, value);
        }

        return root;
    }

    public static void preOrder(Node root) {
        if(root == null) {
            return;
        }
        System.out.print(root.value + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    public static void inOrder(Node root) {
        if(root == null) {
            return;
        }
        inOrder(root.left);
        System.out.print(root.value + " ");
        inOrder(root.right);
    }

    public static void postOrder(Node root) {
        if(root == null) {
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.value + " ");
    }

    public static void levelOrder(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);

        while (!queue.isEmpty()) {
            Node currentNode = queue.remove();
            if(currentNode == null) {
                System.out.println();
                if(queue.isEmpty()) {
                    break;
                }
                queue.add(null);
            }
            else {
                System.out.print(currentNode.value + " ");
                if(currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if(currentNode.right != null) {
                    queue.add(currentNode.right);
                }
            }
        }
    }

    public static boolean search(Node root, int value) {
        if(root == null) {
            return false;
        }
        if(root.value == value) {
            return true;
        }
        else if(root.value > value) {
            return search(root.left, value);
        }
        else {
            return search(root.right, value);
        }
    }

    public static int countNodes(Node root) {
        if(root == null) {
            return 0;
        }

        int leftNodes = countNodes(root.left);
        int rightNodes = countNodes(root.right);
        return leftNodes + rightNodes + 1;
    }

    public static int sumOfNodes(Node root) {
        if(root == null) {
            return 0;
        }

        int leftSum = sumOfNodes(root.left);
        int rightSum = sumOfNodes(root.right);
        return leftSum + rightSum + root.value;
    }

    public static int height(Node root) {
        if(root == null) {
            return 0;
        }
        int leftHeight = height(root.left);
        int rightHeight = height(root.right);

        return Math.max(leftHeight, rightHeight) + 1;
    }

    public static void leftView(Node root, List<Integer> set, int level) {
        if(root == null) {
            return;
        }
        if(set.size() < level) {
            set.add(root.value);
        }
        leftView(root.left, set, level+1);
        leftView(root.right, set, level+1);
    }

    public static void rightView(Node root, List<Integer> list, int level) {
        if(root == null) {
            return;
        }
        if(list.size() < level) {
            list.add(root.value);
        }
        rightView(root.right, list, level+1);
        rightView(root.left, list, level+1);
    }

    public static void printLeafNodes(Node root) {
        if(root == null) {
            return;
        }
        if(root.left == null && root.right == null) {
            System.out.println(root.value);
            return;
        }
        printLeafNodes(root.left);
        printLeafNodes(root.right);
    }

    public static void main(String[] args) {
        Node root = null;
        System.out.println("Initially size = " + size());
        int[] numbers = {5,1,3,4,2,7};
        for(int number : numbers) {
            root = insert(root, number);
        }
        System.out.println("INORDER");
        inOrder(root);
        System.out.println("PREORDER");
        preOrder(root);
        System.out.println("POSTORDER");
        postOrder(root);
        System.out.println("LEVELORDER");
        levelOrder(root);
        System.out.println("After insertion size = " + size());
        System.out.println(search(root, 5));
        System.out.println(search(root, 1));
        System.out.println(search(root, 9));
        System.out.println(sumOfNodes(root));
        System.out.println(countNodes(root));
        List<Integer> list = new ArrayList<>();
        leftView(root, list, 1);
//        System.out.println(list);
//        rightView(root, list, 1);
        System.out.println(list);
        System.out.println(height(root));
        printLeafNodes(root);
    }
}
