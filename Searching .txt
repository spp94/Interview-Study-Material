public class Searching {
    // O(N)
    public int linearSearch(int[] numbers, int target){
        for(int i = 0; i < numbers.length; i++)
            if(numbers[i] == target)
                return i;

        return -1;
    }

    public int binarySearch(int[] numbers, int target){
        return binarySearchUsingRecursion(numbers, target, 0 , numbers.length - 1);
    }

    // O(log2(N))
    private int binarySearchUsingRecursion(int[] numbers, int target, int left, int right){
        if(left > right)
            return -1;

        int middle = (left + right) / 2;
        if(numbers[middle] == target)
            return middle;
        else if(target > numbers[middle])
            return binarySearchUsingRecursion(numbers, target, middle + 1, right);
        else
            return binarySearchUsingRecursion(numbers, target, left, middle - 1);
    }

    // O(log2(N))
    private int binarySearchUsingIteration(int[] numbers, int target){
        int left = 0, right = numbers.length - 1;

        while(left <= right){
            int middle = (left + (right - left)) / 2;
            if(target == numbers[middle])
                return middle;
            else if(target > numbers[middle])
                left = middle + 1;
            else
                right = middle - 1;
        }

        return -1;
    }

    // O(log3(N))
    public int ternarySearch(int[] numbers, int target){
        int left = 0, right = numbers.length - 1;

        while (left <= right){
            int partitionSize = (right - left) / 3;
            int middle1 = left + partitionSize;
            int middle2 = right - partitionSize;

            if(target < numbers[middle1])
                right = middle1 - 1;
            else if(target == numbers[middle1])
                return middle1;
            else if(numbers[middle1] < target && target < numbers[middle2]){
                left = middle1 + 1;
                right = middle2 - 1;
            }
            else if(target == numbers[middle2])
                return middle2;
            else
                left = middle2 + 1;
        }

        return -1;
    }

    public int jumpSearch(int[] numbers, int target){
        int blockSize = (int)Math.sqrt(numbers.length);
        int left = 0, right = blockSize;
        while (left < numbers.length && numbers[right-1] < target){
            left = target + 1;
            if(right >= numbers.length)
                right = numbers.length - 1;
            else
                right = right + blockSize;
        }

        for(int i = left; i <= right; i++){
            if(numbers[i] == target)
                return i;
        }
        return -1;
    }

    // O(log(L))
    public int exponentialSearch(int[] numbers, int target){
        int boundary = 1;
        while (boundary < numbers.length && numbers[boundary] < target){
            boundary = boundary * 2;
        }
        boundary = Math.min(boundary, numbers.length - 1);
        for(int i = boundary / 2; i <= boundary; i++){
            if(numbers[i] == target)
                return i;
        }
        return -1;
    }

}
