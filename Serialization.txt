Marker Interface: An empty interface with no methods and data members. Used to inform the JVM that the class implementing it has special features.

Serialization: is a process of converting objects into byte stream.
Deserialization: is a process of converting the byte stream into an object.

Transient keyword: Use it for the data member that you don't want to be serialized.

If the class we are trying to serialize is not implementing the Serializable interface, then it gives an error NotSerializableException

import java.io.*;

class Employee implements Serializable{
    private int id;
    private String name;

    public Employee(int id, String name){
        this.id = id;
        this.name = name;
    }

    public String toString(){
        return this.id + " -> " + this.name;
    }
}

public class Test {
    public static void main(String[] args) throws Exception {
        Employee s1 = new Employee(1, "Shubham");
//        serializeObject(s1);
        deserializeObject();
        System.out.println("Successfully Serialized");
    }

    private static void serializeObject(Employee s) throws Exception {
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("C:\\Users\\shubh\\Desktop\\w1.txt"));
        out.writeObject(s);
        out.flush();
        out.close();
    }

    private static void deserializeObject()throws Exception{
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("C:\\Users\\shubh\\Desktop\\w1.txt"));
        Employee s = (Employee)in.readObject();
        System.out.println(s);
    }
}