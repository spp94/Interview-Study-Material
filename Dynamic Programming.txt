Max Subarray
-------------

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1

Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23


class Solution {
    public int maxSubArray(int[] nums) {
        int[] temp = new int[nums.length];
        temp[0] = nums[0];
        int max = nums[0];
        
        for(int i = 1; i < nums.length; i++){
            temp[i] = Math.max(nums[i], nums[i] + temp[i-1]);
            max = Math.max(max, temp[i]);
        }
        
        return max;
    }
}


/*

nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
temp: [-2, 1, -2, 4,  3, 5, 6,  1, 5]


*/


---------------------------------------------------------------------------------------------

0/1 Knapsack Problem Dynamic Programming
-----------------------------------------

Total weight = 7
items
weight    value
1          1
3          4
4          5
5          7

Choose the minimum weight such that sum of weight <= 7 and value is maximum


       0  1  2  3  4  5  6  7
	  
(1)1   0  1  1  1  1  1  1  1 
 
(4)3   0  1  1  4  5  5  5  5
 
(5)4   0  1  1  4  5  6  6  9  
  
(7)5   0  1  1  4  5  7  8  9   


Solution:

int[rows][0] = 0;

if(weight[i] < j){
   T[i][j] = T[i-1][j];
}
else{
   T[i][j] = Math.max(value[i] + T[i-1][j - weight[i], T[i-1][j]);
}



For weight 3

max(4+0, 1) = 4
max(4+1, 1) = 5
max(4+1, 1) = 5
max(4+1, 0) = 5
max(4+1, 1) = 5
-----------------


for weight 4

max(5+0, 5) = 5
max(5+1, 5) = 6
max(5+1, 5) = 6
max(5+4, 5) = 9

-----------------

for weight 7

max(7+0, 6) = 7
max(7+1, 6) = 8
max(7+1, 9) = 9




-----------------------------------------------------------------------------------------------

Longest Common Subsequence

String s1 = "abcdef";
String s2 = "acbcf;


    0   a   b   c   d   e   f 

0   0   0   0   0   0   0   0

a   0   1   1   1   1   1   1

c   0   1   1   2   2   2   2

b   0   1   2   2   2   2   2

c   0   1   2   3   3   3   3

f   0   1   2   3   3   3   4

Answer: 4


public class Test {
    public static void main(String[] args){
        String s1 = "abcdef", s2 = "acbcf";
        System.out.println(longestSubsequence(s1.toCharArray(), s2.toCharArray()));
    }

    public static int longestSubsequence(char[] a1, char[] a2){
        int[][] temp = new int[a1.length + 1][a2.length + 1];
        int max = Integer.MIN_VALUE;
        for(int i = 1; i < temp.length; i++){
            for(int j = 1; j < temp[i].length; j++){
                if(a1[i-1] == a2[j-1]){
                    temp[i][j] = temp[i-1][j-1] + 1;
                }
                else {
                    temp[i][j] = Math.max(temp[i][j-1], temp[i-1][j]);
                }
                max = Math.max(max, temp[i][j]);
            }
        }

        return max;
    }
}



------------------------------------------------------------------------------------------------------
 
 * Given an array of non negative numbers and a total, is there subset of numbers in this array which adds up
 * to given total. A
 * Time complexity - O(input.size * total_sum)
 * Space complexity - O(input.size*total_sum)
 
 Target = 5
 numbers = 1, 2, 2, 3, 5
 
 F : FALSE
 T : TRUE
 
         0   1   2   3   4   5
		 
    1    T   T   F   F   F   F

    2    T   T   T   T   F   F        

    2    T   T   T   T   T   T   

    3    T   T   T   T   T   T

    5	 T   T   T   T   T   T 
	
	
	
	
import java.util.Arrays;

public class Test {
    public static void main(String[] args){
        int[] numbers = {1, 2, 2, 3, 5};
        int target = 4;
        System.out.println(subsetSum(numbers, target));
    }

    public static boolean subsetSum(int[] numbers, int target){
        boolean[][] temp = new boolean[numbers.length+1][target+1];
        for(int i = 0; i <  temp.length; i++){
            Arrays.fill(temp[i], true);
        }

        for(int i = 0; i <= target; i++){
            temp[0][i] = false;
        }
        temp[0][numbers[0]] = true;

        for(int i = 1; i < temp.length; i++){
            for(int j = 1; j < temp[i].length; j++){
                if(numbers[i-1] > j){
                    temp[i][j] = temp[i-1][j];
                }
                else if(numbers[i-1] < j){
                    temp[i][j] = (true & temp[i-1][j - numbers[i-1]]);
                }
            }
        }
        return temp[numbers.length][target];
    }
}


------------------------------------------------------------------------------------

COIN CHANGING

COINS: 	1, 5, 6, 8
TOTAL: 6


     0   1   2   3   4   5   6
	
1    0   1   2   3   4   5   6

5    0   1   2   3   4   1   2

6    0   1   2   3   4   5   1

8    0   1   2   3   4   5   6



     0   1   2   3   4   5
	 
2    0   0   1   0   2   0

3    0   0   1   1   2   2   

5	 0   



public class Test {
    public static void main(String[] args){
        int[] numbers = {1, 5, 6, 8};
        int target = 9;
        System.out.println(coinChange(numbers, target));
    }

    public static int coinChange(int[] coins, int target){
        int[][] temp = new int[coins.length+1][target+1];
        for(int i = 1; i <= target; i++){
            if(i % coins[0] == 0){
                temp[1][i] = i / coins[0];
            }
        }

        for(int i = 2; i <= coins.length; i++){
            for(int j = 1; j < temp[i].length; j++){
                if(j % coins[i-1] == 0){
                    temp[i][j] = j / coins[i-1];
                }
                else if(j < coins[i-1]){
                    temp[i][j] = temp[i-1][j];
                }
                else{
                    int x = (coins[i-1] + (coins[i-2] * temp[i-1][j-coins[i-1]])) == j ? 1 + temp[i-1][j-coins[i-1]] : (j / coins[i - 1]) + (j % coins[i - 1]);
                    temp[i][j] = Math.min(x, Math.min((j / coins[i - 1]) + (j % coins[i - 1]), temp[i-1][j]));
                }
            }
        }

        for(int i = 0; i < temp.length; i++){
            for(int j = 0; j < temp[i].length; j++){
                System.out.print(temp[i][j] + "  ");
            }
            System.out.println();
        }

        return temp[coins.length][target];
    }
}



--------------------------------------------------------------------------------------------------------------------------------------------

Minimum Edit Distance

Given two strings and operations edit, delete and add, how many minimum operations would it take to convert one string to another string.
s1 = "abcdef"
s2 = "azced"

edit b to z
delete d  
edit f to d 


      ""   a    b    c    d    e    f 

""	  0	   1    2    3    4    5    6
		
a     1    0    1    2    3    4    5

z     2    1    1    2    3    4    5

c     3    2    2    1    2    3    4

e     4    3    3    2    2    2    3

d     5    4    4    3    2    3    3 


public class Test {
    public static void main(String[] args){
        String s1 = "abcdef", s2 = "aefzced";
        System.out.println(minimumEdit(s1.toCharArray(), s2.toCharArray()));
    }

    public static int minimumEdit(char[] a1, char[] a2){
        int[][] temp = new int[a1.length + 1][a2.length + 1];
        for(int i = 1; i <= a2.length; i++){
            temp[0][i] = i;
        }
        for(int i = 1; i < temp.length; i++){
            temp[i][0] = i;
        }

        for(int i = 1; i < temp.length; i++){
            for(int j = 1; j < temp[i].length; j++){
                if(a1[i-1] == a2[j-1]){
                    temp[i][j] = temp[i-1][j-1];
                }
                else{
                    temp[i][j] = Math.min(Math.min(temp[i][j-1], temp[i-1][j]), temp[i-1][j-1]) + 1;
                }
            }
        }

        return temp[a1.length][a2.length];
    }
}


------------------------------------------------------------------------------------------------------------------------

Longest Increasing Subsequence

Given an array find longest increasing subsequence in this array.

3, 4, -1, 0, 6, 2, 3

     j                 
     3    4   -1   0   6   2   3
	 
T    1    2    1   1   1   1   1



Algorithm
----------

if arr[j] < arr[i]
T[i] = Math.max(T[i], T[j]+1)
